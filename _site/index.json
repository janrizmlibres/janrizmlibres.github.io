{
  "api/EmergentEchoes.Entities.Actors.NPC.State.html": {
    "href": "api/EmergentEchoes.Entities.Actors.NPC.State.html",
    "title": "Enum NPC.State | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum NPC.State Namespace EmergentEchoes.Entities.Actors Assembly EmergentEchoes.dll private enum NPC.State Fields Idle = 0 Wander = 1"
  },
  "api/EmergentEchoes.Entities.Actors.NPC.html": {
    "href": "api/EmergentEchoes.Entities.Actors.NPC.html",
    "title": "Class NPC | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class NPC Namespace EmergentEchoes.Entities.Actors Assembly EmergentEchoes.dll [ScriptPath(\"res://Entities/Actors/NPCs/NPC.cs\")] public class NPC : CharacterBody2D, IDisposable Inheritance object GodotObject Node CanvasItem Node2D CollisionObject2D PhysicsBody2D CharacterBody2D NPC Implements IDisposable Fields Acceleration private const int Acceleration = 4 Field Value int Friction private const int Friction = 4 Field Value int MaxSpeed private const int MaxSpeed = 60 Field Value int _animationState private AnimationNodeStateMachinePlayback _animationState Field Value AnimationNodeStateMachinePlayback _animationTree private AnimationTree _animationTree Field Value AnimationTree _navigationAgent2d private NavigationAgent2D _navigationAgent2d Field Value NavigationAgent2D _npcAgent2d private NPCAgent2D _npcAgent2d Field Value NPCAgent2D _stateTimer private Timer _stateTimer Field Value Timer _tileMapLayer private TileMapLayer _tileMapLayer Field Value TileMapLayer _validTilePositions private readonly Array<Vector2I> _validTilePositions Field Value Array<Vector2I> Methods ChangeState() private void ChangeState() ExecuteNPCAction() private void ExecuteNPCAction() HandleAnimation() private void HandleAnimation() IdleState() private void IdleState() MoveCharacter() private void MoveCharacter() OnActionStateEntered(Variant) private void OnActionStateEntered(Variant state) Parameters state Variant OnActionStateExited(Variant) private void OnActionStateExited(Variant state) Parameters state Variant OnExecutionEnded(Variant) private void OnExecutionEnded(Variant action) Parameters action Variant OnExecutionStarted(Variant) private void OnExecutionStarted(Variant action) Parameters action Variant OnNavigationAgentVelocityComputed(Vector2) private void OnNavigationAgentVelocityComputed(Vector2 safeVelocity) Parameters safeVelocity Vector2 OnNavigationFinished() private void OnNavigationFinished() OnTheftCompleted(TheftData) private void OnTheftCompleted(TheftData theftData) Parameters theftData TheftData PickTargetPosition() private Vector2 PickTargetPosition() Returns Vector2 RandomizeState() private static NPC.State RandomizeState() Returns NPC.State SetupTilePositions() private void SetupTilePositions() _PhysicsProcess(double) Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant. delta is in seconds. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetPhysicsProcess(bool). Corresponds to the Godot.Node.NotificationPhysicsProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _PhysicsProcess(double delta) Parameters delta double"
  },
  "api/EmergentEchoes.Entities.Actors.Player.html": {
    "href": "api/EmergentEchoes.Entities.Actors.Player.html",
    "title": "Class Player | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Player Namespace EmergentEchoes.Entities.Actors Assembly EmergentEchoes.dll [ScriptPath(\"res://Entities/Actors/Player/Player.cs\")] public class Player : CharacterBody2D, IDisposable Inheritance object GodotObject Node CanvasItem Node2D CollisionObject2D PhysicsBody2D CharacterBody2D Player Implements IDisposable Fields _animationState private AnimationNodeStateMachinePlayback _animationState Field Value AnimationNodeStateMachinePlayback _animationTree private AnimationTree _animationTree Field Value AnimationTree _floatTextClicker private Area2D _floatTextClicker Field Value Area2D Properties Acceleration [Export(PropertyHint.None, \"\")] private int Acceleration { get; set; } Property Value int Friction [Export(PropertyHint.None, \"\")] private int Friction { get; set; } Property Value int MaxSpeed [Export(PropertyHint.None, \"\")] private int MaxSpeed { get; set; } Property Value int Methods Move(Vector2) private void Move(Vector2 inputVector) Parameters inputVector Vector2 OnFloatTextClickerInputEvent(Node, InputEvent, long) private void OnFloatTextClickerInputEvent(Node viewport, InputEvent @event, long shapeIdx) Parameters viewport Node event InputEvent shapeIdx long _PhysicsProcess(double) Called during the physics processing step of the main loop. Physics processing means that the frame rate is synced to the physics, i.e. the delta variable should be constant. delta is in seconds. It is only called if physics processing is enabled, which is done automatically if this method is overridden, and can be toggled with SetPhysicsProcess(bool). Corresponds to the Godot.Node.NotificationPhysicsProcess notification in _Notification(int). Note: This method is only called if the node is present in the scene tree (i.e. if it's not an orphan). public override void _PhysicsProcess(double delta) Parameters delta double"
  },
  "api/EmergentEchoes.Entities.Actors.html": {
    "href": "api/EmergentEchoes.Entities.Actors.html",
    "title": "Namespace EmergentEchoes.Entities.Actors | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Entities.Actors Classes NPC Player Enums NPC.State"
  },
  "api/EmergentEchoes.Entities.Camera.Camera2d.html": {
    "href": "api/EmergentEchoes.Entities.Camera.Camera2d.html",
    "title": "Class Camera2d | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Camera2d Namespace EmergentEchoes.Entities.Camera Assembly EmergentEchoes.dll [ScriptPath(\"res://Entities/Camera/Camera2d.cs\")] public class Camera2d : Camera2D, IDisposable Inheritance object GodotObject Node CanvasItem Node2D Camera2D Camera2d Implements IDisposable"
  },
  "api/EmergentEchoes.Entities.Camera.html": {
    "href": "api/EmergentEchoes.Entities.Camera.html",
    "title": "Namespace EmergentEchoes.Entities.Camera | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Entities.Camera Classes Camera2d"
  },
  "api/EmergentEchoes.Entities.UI.Indicators.EmoteBubble.html": {
    "href": "api/EmergentEchoes.Entities.UI.Indicators.EmoteBubble.html",
    "title": "Class EmoteBubble | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class EmoteBubble Namespace EmergentEchoes.Entities.UI.Indicators Assembly EmergentEchoes.dll [ScriptPath(\"res://Entities/UI/Indicators/Emote Bubble/EmoteBubble.cs\")] public class EmoteBubble : Node2D, IDisposable Inheritance object GodotObject Node CanvasItem Node2D EmoteBubble Implements IDisposable Fields _animationPlayer private AnimationPlayer _animationPlayer Field Value AnimationPlayer _durationtTimer private Timer _durationtTimer Field Value Timer Properties AnimationName public string AnimationName { get; set; } Property Value string Methods OnAnimationFinished(StringName) private void OnAnimationFinished(StringName animName) Parameters animName StringName OnDurationTimerTimeout() private void OnDurationTimerTimeout()"
  },
  "api/EmergentEchoes.Entities.UI.Indicators.FloatingText.html": {
    "href": "api/EmergentEchoes.Entities.UI.Indicators.FloatingText.html",
    "title": "Class FloatingText | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class FloatingText Namespace EmergentEchoes.Entities.UI.Indicators Assembly EmergentEchoes.dll [ScriptPath(\"res://Entities/UI/Indicators/Floating Text/FloatingText.cs\")] public class FloatingText : Control, IDisposable Inheritance object GodotObject Node CanvasItem Control FloatingText Implements IDisposable Fields _label private Label _label Field Value Label _textureRect private TextureRect _textureRect Field Value TextureRect Methods ShowValue(string, Vector2, float, float) public void ShowValue(string value, Vector2 travel, float duration, float spread) Parameters value string travel Vector2 duration float spread float"
  },
  "api/EmergentEchoes.Entities.UI.Indicators.html": {
    "href": "api/EmergentEchoes.Entities.UI.Indicators.html",
    "title": "Namespace EmergentEchoes.Entities.UI.Indicators | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Entities.UI.Indicators Classes EmoteBubble FloatingText"
  },
  "api/EmergentEchoes.Stages.Island.World.html": {
    "href": "api/EmergentEchoes.Stages.Island.World.html",
    "title": "Class World | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class World Namespace EmergentEchoes.Stages.Island Assembly EmergentEchoes.dll [ScriptPath(\"res://Stages/Island/World.cs\")] public class World : Node2D, IDisposable Inheritance object GodotObject Node CanvasItem Node2D World Implements IDisposable"
  },
  "api/EmergentEchoes.Stages.Island.html": {
    "href": "api/EmergentEchoes.Stages.Island.html",
    "title": "Namespace EmergentEchoes.Stages.Island | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Stages.Island Classes World"
  },
  "api/EmergentEchoes.Utilities.EmoteManager.html": {
    "href": "api/EmergentEchoes.Utilities.EmoteManager.html",
    "title": "Class EmoteManager | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class EmoteManager Namespace EmergentEchoes.Utilities Assembly EmergentEchoes.dll public static class EmoteManager Inheritance object EmoteManager Fields _emoteBubbleScene private static readonly PackedScene _emoteBubbleScene Field Value PackedScene Methods ShowEmoteBubble(Node2D, Emote) public static void ShowEmoteBubble(Node2D character, Emote emote) Parameters character Node2D emote Emote"
  },
  "api/EmergentEchoes.Utilities.Enums.Emote.html": {
    "href": "api/EmergentEchoes.Utilities.Enums.Emote.html",
    "title": "Enum Emote | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum Emote Namespace EmergentEchoes.Utilities.Enums Assembly EmergentEchoes.dll public enum Emote Fields Circle = 0 Cross = 1 Dizzy = 2 Ellipsis = 3 Exclamation = 4 Hum = 5 Idea = 6 Interrobang = 7 Mark = 8 Query = 9 Sweat = 10"
  },
  "api/EmergentEchoes.Utilities.Enums.html": {
    "href": "api/EmergentEchoes.Utilities.Enums.html",
    "title": "Namespace EmergentEchoes.Utilities.Enums | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Utilities.Enums Enums Emote"
  },
  "api/EmergentEchoes.Utilities.FloatTextManager.html": {
    "href": "api/EmergentEchoes.Utilities.FloatTextManager.html",
    "title": "Class FloatTextManager | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class FloatTextManager Namespace EmergentEchoes.Utilities Assembly EmergentEchoes.dll public static class FloatTextManager Inheritance object FloatTextManager Fields _duration private static readonly float _duration Field Value float _floatingTextScene private static readonly PackedScene _floatingTextScene Field Value PackedScene _spread private static readonly float _spread Field Value float _travel private static Vector2 _travel Field Value Vector2 Methods ShowFloatText(Node2D, string) public static void ShowFloatText(Node2D character, string value) Parameters character Node2D value string"
  },
  "api/EmergentEchoes.Utilities.html": {
    "href": "api/EmergentEchoes.Utilities.html",
    "title": "Namespace EmergentEchoes.Utilities | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace EmergentEchoes.Utilities Classes EmoteManager FloatTextManager"
  },
  "api/NPCProcGen.ActorTag2D.html": {
    "href": "api/NPCProcGen.ActorTag2D.html",
    "title": "Class ActorTag2D | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class ActorTag2D Namespace NPCProcGen Assembly EmergentEchoes.dll Represents a 2D tag for an actor, which includes monetary and food values, and a steal marker. [Tool] [ScriptPath(\"res://addons/NPCProcGen/Nodes/ActorTag2D/ActorTag2D.cs\")] public class ActorTag2D : Node, IDisposable Inheritance object GodotObject Node ActorTag2D Implements IDisposable Derived NPCAgent2D Fields _stealMarker private Marker2D _stealMarker Field Value Marker2D Properties FoodValue Gets or sets the food value associated with this actor. [Export(PropertyHint.Range, \"1,100,\")] public int FoodValue { get; set; } Property Value int The food value as an integer. MoneyValue Gets or sets the monetary value associated with this actor. [Export(PropertyHint.Range, \"0,1000000,\")] public int MoneyValue { get; set; } Property Value int The monetary value as an integer. Parent Gets the parent node as a Node2D. public Node2D Parent { get; protected set; } Property Value Node2D StealMarker Gets or sets the StealMarker, which is a Marker2D instance. When the StealMarker is set to a new value, it updates the configuration warnings. [Export(PropertyHint.None, \"\")] public Marker2D StealMarker { get; set; } Property Value Marker2D The Marker2D instance representing the StealMarker."
  },
  "api/NPCProcGen.Autoloads.AutoloadInitializer.html": {
    "href": "api/NPCProcGen.Autoloads.AutoloadInitializer.html",
    "title": "Class AutoloadInitializer | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class AutoloadInitializer Namespace NPCProcGen.Autoloads Assembly EmergentEchoes.dll Provides initialization methods for autoloaded singletons. public static class AutoloadInitializer Inheritance object AutoloadInitializer Methods FindActorsInNode(Node, List<ActorTag2D>) Recursively finds all ActorTag2D nodes in the given node and its children. private static void FindActorsInNode(Node node, List<ActorTag2D> Actors) Parameters node Node The node to search. Actors List<ActorTag2D> The list to populate with found ActorTag2D nodes. Init(Node) Initializes the WorldState and ResourceManager with actors found in the current scene. public static void Init(Node currentScene) Parameters currentScene Node The current scene node."
  },
  "api/NPCProcGen.Autoloads.ResourceManager.html": {
    "href": "api/NPCProcGen.Autoloads.ResourceManager.html",
    "title": "Class ResourceManager | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class ResourceManager Namespace NPCProcGen.Autoloads Assembly EmergentEchoes.dll Manages resources for actors in the game. [ScriptPath(\"res://addons/NPCProcGen/Autoloads/ResourceManager.cs\")] public class ResourceManager : Node, IDisposable Inheritance object GodotObject Node ResourceManager Implements IDisposable Constructors ResourceManager() private ResourceManager() Fields _actorResources Dictionary to store resources for each actor. private readonly Dictionary<ActorTag2D, Dictionary<ResourceType, ResourceStat>> _actorResources Field Value Dictionary<ActorTag2D, Dictionary<ResourceType, ResourceStat>> _instance private static readonly Lazy<ResourceManager> _instance Field Value Lazy<ResourceManager> _tangibleTypes List of tangible resource types. private readonly List<ResourceType> _tangibleTypes Field Value List<ResourceType> Properties Instance Gets the singleton instance of the ResourceManager. public static ResourceManager Instance { get; } Property Value ResourceManager TangibleTypes Gets a list of tangible resource types. public List<ResourceType> TangibleTypes { get; } Property Value List<ResourceType> Methods GetResource(ActorTag2D, ResourceType) Gets the resource of a specific type for a given actor. public ResourceStat GetResource(ActorTag2D actor, ResourceType type) Parameters actor ActorTag2D The actor to get the resource for. type ResourceType The type of resource to get. Returns ResourceStat The resource stat of the specified type for the actor. HasResource(ActorTag2D, ResourceType) Checks if a given actor has a specific resource. public bool HasResource(ActorTag2D actor, ResourceType type) Parameters actor ActorTag2D The actor to check. type ResourceType The type of resource to check for. Returns bool True if the actor has the resource, otherwise false. Initialize(List<ActorTag2D>) Initializes the resource manager with a list of actors. public void Initialize(List<ActorTag2D> actors) Parameters actors List<ActorTag2D> The list of actors to initialize. IsDeficient(ActorTag2D, ResourceType) Checks if a given actor is deficient in a specific resource. public bool IsDeficient(ActorTag2D actor, ResourceType type) Parameters actor ActorTag2D The actor to check. type ResourceType The type of resource to check for deficiency. Returns bool True if the actor is deficient in the resource, otherwise false. TranserResources(ActorTag2D, ActorTag2D, ResourceType, float) Transfers resources from one actor to another. public void TranserResources(ActorTag2D from, ActorTag2D to, ResourceType type, float amount) Parameters from ActorTag2D The actor to transfer resources from. to ActorTag2D The actor to transfer resources to. type ResourceType The type of resource to transfer. amount float The amount of resource to transfer."
  },
  "api/NPCProcGen.Autoloads.WorldState.html": {
    "href": "api/NPCProcGen.Autoloads.WorldState.html",
    "title": "Class WorldState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class WorldState Namespace NPCProcGen.Autoloads Assembly EmergentEchoes.dll Represents the global state of the world, including actors, structures, events, and crimes. [ScriptPath(\"res://addons/NPCProcGen/Autoloads/WorldState.cs\")] public class WorldState : Node, IDisposable Inheritance object GodotObject Node WorldState Implements IDisposable Constructors WorldState() private WorldState() Fields _globalEvents Actions and interactions that have taken place and what actors performed them. private readonly List<Event> _globalEvents Field Value List<Event> _instance private static readonly Lazy<WorldState> _instance Field Value Lazy<WorldState> _solvedCrimes Solved crimes and who apprehended the criminal. private readonly List<Crime> _solvedCrimes Field Value List<Crime> _structures List of structures in the world. private readonly List<Node2D> _structures Field Value List<Node2D> _taskRecords Tasks that are delegated to which individuals. private readonly List<Event> _taskRecords Field Value List<Event> _unsolvedCrimes Crimes that are publicly known and not yet solved. private readonly List<Crime> _unsolvedCrimes Field Value List<Crime> Properties Actors Gets the list of actors in the world. public IReadOnlyList<ActorTag2D> Actors { get; private set; } Property Value IReadOnlyList<ActorTag2D> Instance Gets the singleton instance of the WorldState. public static WorldState Instance { get; } Property Value WorldState Methods Initialize(List<ActorTag2D>) Initializes the world state with the given list of actors. public void Initialize(List<ActorTag2D> actors) Parameters actors List<ActorTag2D> The list of actors to initialize."
  },
  "api/NPCProcGen.Autoloads.html": {
    "href": "api/NPCProcGen.Autoloads.html",
    "title": "Namespace NPCProcGen.Autoloads | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Autoloads Classes AutoloadInitializer Provides initialization methods for autoloaded singletons. ResourceManager Manages resources for actors in the game. WorldState Represents the global state of the world, including actors, structures, events, and crimes."
  },
  "api/NPCProcGen.Core.Actions.BaseAction.html": {
    "href": "api/NPCProcGen.Core.Actions.BaseAction.html",
    "title": "Class BaseAction | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class BaseAction Namespace NPCProcGen.Core.Actions Assembly EmergentEchoes.dll Abstract base class for actions performed by an NPC agent. public abstract class BaseAction Inheritance object BaseAction Derived TheftAction Constructors BaseAction(NPCAgent2D) Initializes a new instance of the BaseAction class. public BaseAction(NPCAgent2D owner) Parameters owner NPCAgent2D The NPC agent that owns this action. Fields _currentState The current state of the action. protected BaseState _currentState Field Value BaseState _owner The NPC agent that owns this action. protected readonly NPCAgent2D _owner Field Value NPCAgent2D Methods CompleteAction(ActionType) Completes the current action. protected void CompleteAction(ActionType actionType) Parameters actionType ActionType The type of action that was completed. GetStolenResource() Gets the resource that is being stolen, if any. public Tuple<ResourceType, float> GetStolenResource() Returns Tuple<ResourceType, float> A tuple containing the resource type and amount, or null if no resource is being stolen. GetTargetPosition() Gets the target position for the current action. public Vector2 GetTargetPosition() Returns Vector2 The target position as a Godot.Vector2. IsNavigating() Determines whether the NPC is currently navigating. public bool IsNavigating() Returns bool true if the NPC is navigating; otherwise, false. Run() Runs the action. public abstract void Run() TransitionTo(BaseState) Transitions to a new state. protected void TransitionTo(BaseState newState) Parameters newState BaseState The new state to transition to. Update(double) Updates the action. public abstract void Update(double delta) Parameters delta double The time elapsed since the last update. Events ActionComplete Event triggered when the action is complete. public event Action ActionComplete Event Type Action"
  },
  "api/NPCProcGen.Core.Actions.TheftAction.html": {
    "href": "api/NPCProcGen.Core.Actions.TheftAction.html",
    "title": "Class TheftAction | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class TheftAction Namespace NPCProcGen.Core.Actions Assembly EmergentEchoes.dll Represents an action where an NPC agent attempts to steal a resource from a target. public class TheftAction : BaseAction Inheritance object BaseAction TheftAction Constructors TheftAction(NPCAgent2D, ActorTag2D, ResourceType) Initializes a new instance of the TheftAction class. public TheftAction(NPCAgent2D owner, ActorTag2D target, ResourceType type) Parameters owner NPCAgent2D The NPC agent performing the action. target ActorTag2D The target actor from which to steal. type ResourceType The type of resource to steal. Fields _target The target actor from which to steal. private readonly ActorTag2D _target Field Value ActorTag2D _targetLastPos The last known position of the target. private Vector2 _targetLastPos Field Value Vector2 _targetResource The type of resource to steal. private readonly ResourceType _targetResource Field Value ResourceType moveState The state for moving towards the target. private MoveState moveState Field Value MoveState stealState The state for stealing from the target. private StealState stealState Field Value StealState Methods InitializeStates() Initializes the states for the theft action. private void InitializeStates() Run() Starts the theft action. public override void Run() Update(double) Updates the current state of the action. public override void Update(double delta) Parameters delta double The time elapsed since the last update."
  },
  "api/NPCProcGen.Core.Actions.html": {
    "href": "api/NPCProcGen.Core.Actions.html",
    "title": "Namespace NPCProcGen.Core.Actions | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Actions Classes BaseAction Abstract base class for actions performed by an NPC agent. TheftAction Represents an action where an NPC agent attempts to steal a resource from a target."
  },
  "api/NPCProcGen.Core.Components.ActorData.html": {
    "href": "api/NPCProcGen.Core.Components.ActorData.html",
    "title": "Class ActorData | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class ActorData Namespace NPCProcGen.Core.Components Assembly EmergentEchoes.dll Represents data related to an actor. public class ActorData Inheritance object ActorData Constructors ActorData(ActorTag2D) Initializes a new instance of the ActorData class. public ActorData(ActorTag2D actor) Parameters actor ActorTag2D The actor associated with this data. Fields _actor private readonly ActorTag2D _actor Field Value ActorTag2D _decayDuration private static readonly float _decayDuration Field Value float _decayTimer private float _decayTimer Field Value float _lastKnownPosition private Vector2? _lastKnownPosition Field Value Vector2? Properties LastKnownPosition Gets or sets the last known position of the actor. public Vector2? LastKnownPosition { get; set; } Property Value Vector2? Relationship Gets the relationship value of the actor. public float Relationship { get; private set; } Property Value float Methods Update(double) Updates the actor data. public void Update(double delta) Parameters delta double The time elapsed since the last update."
  },
  "api/NPCProcGen.Core.Components.Enums.ActionState.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.ActionState.html",
    "title": "Enum ActionState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum ActionState Namespace NPCProcGen.Core.Components.Enums Assembly EmergentEchoes.dll Represents the different states an action can be in. public enum ActionState Fields Flee = 3 The entity is fleeing. Move = 0 The entity is moving. Steal = 2 The entity is stealing. Wander = 1 The entity is wandering."
  },
  "api/NPCProcGen.Core.Components.Enums.ActionType.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.ActionType.html",
    "title": "Enum ActionType | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum ActionType Namespace NPCProcGen.Core.Components.Enums Assembly EmergentEchoes.dll Represents the types of actions that can be performed. public enum ActionType Fields Theft = 0 Represents the action of theft."
  },
  "api/NPCProcGen.Core.Components.Enums.CrimeCategory.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.CrimeCategory.html",
    "title": "Enum CrimeCategory | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum CrimeCategory Namespace NPCProcGen.Core.Components.Enums Assembly EmergentEchoes.dll Represents different categories of crimes. public enum CrimeCategory Fields Assault = 1 Represents the crime of assault. Theft = 0 Represents the crime of theft."
  },
  "api/NPCProcGen.Core.Components.Enums.ResourceType.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.ResourceType.html",
    "title": "Enum ResourceType | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum ResourceType Namespace NPCProcGen.Core.Components.Enums Assembly EmergentEchoes.dll Represents different types of resources. public enum ResourceType Fields Companionship = 2 Represents companionship as a resource. Food = 1 Represents food as a resource. Money = 0 Represents money as a resource."
  },
  "api/NPCProcGen.Core.Components.Enums.SocialPractice.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.SocialPractice.html",
    "title": "Enum SocialPractice | NPC Procedural Generation Plugin for Godot",
    "keywords": "Enum SocialPractice Namespace NPCProcGen.Core.Components.Enums Assembly EmergentEchoes.dll Represents different social practices. public enum SocialPractice Fields FailedPetition = 2 Represents a failed petition social practice. Proactive = 0 Represents a proactive social practice. RefusedPetition = 1 Represents a refused petition social practice."
  },
  "api/NPCProcGen.Core.Components.Enums.html": {
    "href": "api/NPCProcGen.Core.Components.Enums.html",
    "title": "Namespace NPCProcGen.Core.Components.Enums | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Components.Enums Enums ActionState Represents the different states an action can be in. ActionType Represents the types of actions that can be performed. CrimeCategory Represents different categories of crimes. ResourceType Represents different types of resources. SocialPractice Represents different social practices."
  },
  "api/NPCProcGen.Core.Components.Records.Crime.html": {
    "href": "api/NPCProcGen.Core.Components.Records.Crime.html",
    "title": "Class Crime | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Crime Namespace NPCProcGen.Core.Components.Records Assembly EmergentEchoes.dll Represents a crime event. public record Crime : IEquatable<Crime> Inheritance object Crime Implements IEquatable<Crime> Constructors Crime(CrimeCategory, ActorTag2D, ActorTag2D, IReadOnlyList<ActorTag2D>) Represents a crime event. public Crime(CrimeCategory Category, ActorTag2D Criminal, ActorTag2D Victim, IReadOnlyList<ActorTag2D> Witnesses) Parameters Category CrimeCategory The category of the crime. Criminal ActorTag2D The actor who committed the crime. Victim ActorTag2D The actor who was the victim of the crime. Witnesses IReadOnlyList<ActorTag2D> The list of actors who witnessed the crime. Properties Category The category of the crime. public CrimeCategory Category { get; init; } Property Value CrimeCategory Criminal The actor who committed the crime. public ActorTag2D Criminal { get; init; } Property Value ActorTag2D Victim The actor who was the victim of the crime. public ActorTag2D Victim { get; init; } Property Value ActorTag2D Witnesses The list of actors who witnessed the crime. public IReadOnlyList<ActorTag2D> Witnesses { get; init; } Property Value IReadOnlyList<ActorTag2D>"
  },
  "api/NPCProcGen.Core.Components.Records.html": {
    "href": "api/NPCProcGen.Core.Components.Records.html",
    "title": "Namespace NPCProcGen.Core.Components.Records | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Components.Records Classes Crime Represents a crime event."
  },
  "api/NPCProcGen.Core.Components.ResourceStat.html": {
    "href": "api/NPCProcGen.Core.Components.ResourceStat.html",
    "title": "Class ResourceStat | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class ResourceStat Namespace NPCProcGen.Core.Components Assembly EmergentEchoes.dll Represents the statistics of a resource. public class ResourceStat Inheritance object ResourceStat Constructors ResourceStat(ResourceType, float, float) Initializes a new instance of the ResourceStat class. public ResourceStat(ResourceType type, float value, float weight) Parameters type ResourceType The type of resource. value float The initial amount of resource. weight float The weight of the resource. Fields amount private float amount Field Value float Properties Amount Gets or sets the amount of resource. public float Amount { get; set; } Property Value float LowerThreshold Gets the lower threshold for the resource amount. public float LowerThreshold { get; private set; } Property Value float Type Gets the type of resource. public ResourceType Type { get; private set; } Property Value ResourceType UpperThreshold Gets the upper threshold for the resource amount. public float UpperThreshold { get; private set; } Property Value float Weight Gets the weight of the resource. public float Weight { get; private set; } Property Value float Methods IsDeficient() Determines whether the resource amount is deficient. public bool IsDeficient() Returns bool true if the resource amount is deficient; otherwise, false. IsImbalanced() Determines whether the resource amount is imbalanced. public bool IsImbalanced() Returns bool true if the resource amount is imbalanced; otherwise, false. IsSaturated() Determines whether the resource amount is saturated. public bool IsSaturated() Returns bool true if the resource amount is saturated; otherwise, false."
  },
  "api/NPCProcGen.Core.Components.Variants.TheftData.html": {
    "href": "api/NPCProcGen.Core.Components.Variants.TheftData.html",
    "title": "Class TheftData | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class TheftData Namespace NPCProcGen.Core.Components.Variants Assembly EmergentEchoes.dll Represents data related to a theft event. [ScriptPath(\"res://addons/NPCProcGen/Core/Components/Variants/TheftData.cs\")] public class TheftData : GodotObject, IDisposable Inheritance object GodotObject TheftData Implements IDisposable Properties Amount Gets or sets the amount of resource that was stolen. public int Amount { get; set; } Property Value int ResourceType Gets or sets the type of resource that was stolen. public ResourceType ResourceType { get; set; } Property Value ResourceType"
  },
  "api/NPCProcGen.Core.Components.Variants.html": {
    "href": "api/NPCProcGen.Core.Components.Variants.html",
    "title": "Namespace NPCProcGen.Core.Components.Variants | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Components.Variants Classes TheftData Represents data related to a theft event."
  },
  "api/NPCProcGen.Core.Components.html": {
    "href": "api/NPCProcGen.Core.Components.html",
    "title": "Namespace NPCProcGen.Core.Components | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Components Classes ActorData Represents data related to an actor. ResourceStat Represents the statistics of a resource."
  },
  "api/NPCProcGen.Core.Events.Event.html": {
    "href": "api/NPCProcGen.Core.Events.Event.html",
    "title": "Class Event | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Event Namespace NPCProcGen.Core.Events Assembly EmergentEchoes.dll Represents an abstract base class for events. public abstract class Event Inheritance object Event Derived MoveEvent PetitionRefusalEvent Constructors Event(ActorTag2D) Initializes a new instance of the Event class. public Event(ActorTag2D doer) Parameters doer ActorTag2D The actor who performed the event. Fields _doer The actor who performed the event. protected readonly ActorTag2D _doer Field Value ActorTag2D Methods GetGlobalDescription() Gets the global description of the event. public abstract string GetGlobalDescription() Returns string A string describing the event globally."
  },
  "api/NPCProcGen.Core.Events.IGeneralEvent.html": {
    "href": "api/NPCProcGen.Core.Events.IGeneralEvent.html",
    "title": "Interface IGeneralEvent | NPC Procedural Generation Plugin for Godot",
    "keywords": "Interface IGeneralEvent Namespace NPCProcGen.Core.Events Assembly EmergentEchoes.dll Represents a general event. public interface IGeneralEvent Methods GetLocalDescription() Gets the local description of the event. string GetLocalDescription() Returns string A string describing the event locally."
  },
  "api/NPCProcGen.Core.Events.IPerspectiveEvent.html": {
    "href": "api/NPCProcGen.Core.Events.IPerspectiveEvent.html",
    "title": "Interface IPerspectiveEvent | NPC Procedural Generation Plugin for Godot",
    "keywords": "Interface IPerspectiveEvent Namespace NPCProcGen.Core.Events Assembly EmergentEchoes.dll Represents an event from a specific perspective. public interface IPerspectiveEvent Methods GetLocalDescription(bool) Gets the local description of the event. string GetLocalDescription(bool isDoer) Parameters isDoer bool Indicates if the description is for the doer. Returns string A string describing the event locally."
  },
  "api/NPCProcGen.Core.Events.MoveEvent.html": {
    "href": "api/NPCProcGen.Core.Events.MoveEvent.html",
    "title": "Class MoveEvent | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class MoveEvent Namespace NPCProcGen.Core.Events Assembly EmergentEchoes.dll Represents an event where an actor moves to a destination. public class MoveEvent : Event, IGeneralEvent Inheritance object Event MoveEvent Implements IGeneralEvent Constructors MoveEvent(ActorTag2D, Marker2D) Initializes a new instance of the MoveEvent class. public MoveEvent(ActorTag2D doer, Marker2D destination) Parameters doer ActorTag2D The actor who moved. destination Marker2D The destination marker. Fields _destination private readonly Marker2D _destination Field Value Marker2D Methods GetGlobalDescription() Gets the global description of the event. public override string GetGlobalDescription() Returns string A string describing the event globally. GetLocalDescription() Gets the local description of the event. public string GetLocalDescription() Returns string A string describing the event locally."
  },
  "api/NPCProcGen.Core.Events.PetitionRefusalEvent.html": {
    "href": "api/NPCProcGen.Core.Events.PetitionRefusalEvent.html",
    "title": "Class PetitionRefusalEvent | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class PetitionRefusalEvent Namespace NPCProcGen.Core.Events Assembly EmergentEchoes.dll Represents an event where a petition is refused. public class PetitionRefusalEvent : Event, IPerspectiveEvent Inheritance object Event PetitionRefusalEvent Implements IPerspectiveEvent Constructors PetitionRefusalEvent(ActorTag2D, ActorTag2D, ResourceType) Initializes a new instance of the PetitionRefusalEvent class. public PetitionRefusalEvent(ActorTag2D doer, ActorTag2D deniedNPC, ResourceType deniedResource) Parameters doer ActorTag2D The actor who refused the petition. deniedNPC ActorTag2D The actor whose petition was denied. deniedResource ResourceType The resource that was denied. Fields _deniedNPC private readonly ActorTag2D _deniedNPC Field Value ActorTag2D _deniedResource private readonly ResourceType _deniedResource Field Value ResourceType Methods GetGlobalDescription() Gets the global description of the event. public override string GetGlobalDescription() Returns string A string describing the event globally. GetLocalDescription(bool) Gets the local description of the event. public string GetLocalDescription(bool isDoer) Parameters isDoer bool Indicates if the description is for the doer. Returns string A string describing the event locally."
  },
  "api/NPCProcGen.Core.Events.html": {
    "href": "api/NPCProcGen.Core.Events.html",
    "title": "Namespace NPCProcGen.Core.Events | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Events Classes Event Represents an abstract base class for events. MoveEvent Represents an event where an actor moves to a destination. PetitionRefusalEvent Represents an event where a petition is refused. Interfaces IGeneralEvent Represents a general event. IPerspectiveEvent Represents an event from a specific perspective."
  },
  "api/NPCProcGen.Core.Helpers.CommonUtils.html": {
    "href": "api/NPCProcGen.Core.Helpers.CommonUtils.html",
    "title": "Class CommonUtils | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class CommonUtils Namespace NPCProcGen.Core.Helpers Assembly EmergentEchoes.dll Provides common utility functions. public static class CommonUtils Inheritance object CommonUtils Properties Rnd Gets a shared instance of the random number generator. public static Random Rnd { get; private set; } Property Value Random Methods GetRandomPosInCircularArea(Vector2, float, float?) Gets a random position within a circular area. public static Vector2 GetRandomPosInCircularArea(Vector2 center, float radius, float? minRadius = null) Parameters center Vector2 The center of the circular area. radius float The radius of the circular area. minRadius float? The optional minimum radius. Returns Vector2 A random position within the circular area."
  },
  "api/NPCProcGen.Core.Helpers.DebugTool.html": {
    "href": "api/NPCProcGen.Core.Helpers.DebugTool.html",
    "title": "Class DebugTool | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class DebugTool Namespace NPCProcGen.Core.Helpers Assembly EmergentEchoes.dll Provides debugging tools and assertions. public static class DebugTool Inheritance object DebugTool Methods Assert(bool, string) Asserts a condition and throws an exception if the condition is false. public static void Assert(bool condition, string message) Parameters condition bool The condition to assert. message string The message to display if the assertion fails."
  },
  "api/NPCProcGen.Core.Helpers.NotifManager.html": {
    "href": "api/NPCProcGen.Core.Helpers.NotifManager.html",
    "title": "Class NotifManager | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class NotifManager Namespace NPCProcGen.Core.Helpers Assembly EmergentEchoes.dll Manages notifications for navigation completion and actor detection. public class NotifManager Inheritance object NotifManager Methods NotifyActorDetected(ActorTag2D) Notifies subscribers that an actor has been detected. public void NotifyActorDetected(ActorTag2D target) Parameters target ActorTag2D The detected actor. NotifyNavigationComplete() Notifies subscribers that navigation is complete. public void NotifyNavigationComplete() Events ActorDetected Event triggered when an actor is detected. public event Action<ActorTag2D> ActorDetected Event Type Action<ActorTag2D> NavigationComplete Event triggered when navigation is complete. public event Action NavigationComplete Event Type Action"
  },
  "api/NPCProcGen.Core.Helpers.html": {
    "href": "api/NPCProcGen.Core.Helpers.html",
    "title": "Namespace NPCProcGen.Core.Helpers | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Helpers Classes CommonUtils Provides common utility functions. DebugTool Provides debugging tools and assertions. NotifManager Manages notifications for navigation completion and actor detection."
  },
  "api/NPCProcGen.Core.Internal.Executor.html": {
    "href": "api/NPCProcGen.Core.Internal.Executor.html",
    "title": "Class Executor | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Executor Namespace NPCProcGen.Core.Internal Assembly EmergentEchoes.dll Executes actions for NPCs. public class Executor Inheritance object Executor Fields _action private BaseAction _action Field Value BaseAction Methods GetTargetPosition() Gets the target position of the current action. public Vector2 GetTargetPosition() Returns Vector2 The target position. HasAction() Checks if there is an action currently being executed. public bool HasAction() Returns bool True if an action is being executed, otherwise false. OnActionComplete() Handles the completion of the current action. private void OnActionComplete() QueryNavigationAction() Queries if the current action involves navigation. public bool QueryNavigationAction() Returns bool True if the action involves navigation, otherwise false. QueryStolenResource() Queries the resource stolen by the current action. public Tuple<ResourceType, float> QueryStolenResource() Returns Tuple<ResourceType, float> A tuple containing the resource type and amount stolen. SetAction(BaseAction) Sets a new action to be executed. public void SetAction(BaseAction action) Parameters action BaseAction The action to be executed. Update(double) Updates the current action. public void Update(double delta) Parameters delta double The time elapsed since the last update. Events ExecutionEnded Event triggered when the execution of an action ends. public event Action ExecutionEnded Event Type Action"
  },
  "api/NPCProcGen.Core.Internal.Memorizer.html": {
    "href": "api/NPCProcGen.Core.Internal.Memorizer.html",
    "title": "Class Memorizer | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Memorizer Namespace NPCProcGen.Core.Internal Assembly EmergentEchoes.dll The Memorizer class is responsible for managing long-term and short-term memories of actors. public class Memorizer Inheritance object Memorizer Fields _actorData Dictionary to store actor data. private readonly Dictionary<ActorTag2D, ActorData> _actorData Field Value Dictionary<ActorTag2D, ActorData> Properties LongTermMemory Gets the list of long-term memories. public List<Event> LongTermMemory { get; private set; } Property Value List<Event> ShortTermMemory Gets the linked list of short-term memories. public LinkedList<Event> ShortTermMemory { get; private set; } Property Value LinkedList<Event> Methods GetActorLocation(ActorTag2D) Gets the last known location of the specified actor. public Vector2? GetActorLocation(ActorTag2D actor) Parameters actor ActorTag2D The actor to get the location for. Returns Vector2? The last known location of the actor, or null if not found. Initialize(List<ActorTag2D>) Initializes the memorizer with a list of actors. public void Initialize(List<ActorTag2D> actors) Parameters actors List<ActorTag2D> The list of actors to initialize. IsClose(ActorTag2D) Determines if the specified actor is close. public bool IsClose(ActorTag2D actor) Parameters actor ActorTag2D The actor to check. Returns bool True if the actor is close, otherwise false. IsFriendly(ActorTag2D) Determines if the specified actor is friendly. public bool IsFriendly(ActorTag2D actor) Parameters actor ActorTag2D The actor to check. Returns bool True if the actor is friendly, otherwise false. IsTrusted(ActorTag2D) Determines if the specified actor is trusted. public bool IsTrusted(ActorTag2D actor) Parameters actor ActorTag2D The actor to check. Returns bool True if the actor is trusted, otherwise false. Update(double) Updates the memorizer with the given delta time. public void Update(double delta) Parameters delta double The delta time to update with. UpdateActorLocation(ActorTag2D, Vector2) Updates the location of the specified actor. public void UpdateActorLocation(ActorTag2D actor, Vector2 location) Parameters actor ActorTag2D The actor to update the location for. location Vector2 The new location of the actor."
  },
  "api/NPCProcGen.Core.Internal.Sensor.html": {
    "href": "api/NPCProcGen.Core.Internal.Sensor.html",
    "title": "Class Sensor | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Sensor Namespace NPCProcGen.Core.Internal Assembly EmergentEchoes.dll The Sensor class is responsible for accessing the world state and retrieving actor information. public class Sensor Inheritance object Sensor Constructors Sensor() Initializes a new instance of the Sensor class. public Sensor() Fields _worldState The world state instance. private readonly WorldState _worldState Field Value WorldState Methods GetActors() Retrieves the list of actors from the world state. public IReadOnlyList<ActorTag2D> GetActors() Returns IReadOnlyList<ActorTag2D> A read-only list of actors."
  },
  "api/NPCProcGen.Core.Internal.Strategizer.html": {
    "href": "api/NPCProcGen.Core.Internal.Strategizer.html",
    "title": "Class Strategizer | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Strategizer Namespace NPCProcGen.Core.Internal Assembly EmergentEchoes.dll The Strategizer class is responsible for evaluating and selecting actions based on traits. public class Strategizer Inheritance object Strategizer Fields _traits List of traits associated with the strategizer. private readonly List<Trait> _traits Field Value List<Trait> Methods AddTrait(Trait) Adds a trait to the strategizer. public void AddTrait(Trait trait) Parameters trait Trait The trait to be added. EvaluateAction(SocialPractice) Evaluates and selects the best action based on the given social practice. public BaseAction EvaluateAction(SocialPractice practice) Parameters practice SocialPractice The social practice to evaluate actions for. Returns BaseAction The best action based on the traits, or null if no action is suitable."
  },
  "api/NPCProcGen.Core.Internal.html": {
    "href": "api/NPCProcGen.Core.Internal.html",
    "title": "Namespace NPCProcGen.Core.Internal | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Internal Classes Executor Executes actions for NPCs. Memorizer The Memorizer class is responsible for managing long-term and short-term memories of actors. Sensor The Sensor class is responsible for accessing the world state and retrieving actor information. Strategizer The Strategizer class is responsible for evaluating and selecting actions based on traits."
  },
  "api/NPCProcGen.Core.States.BaseState.html": {
    "href": "api/NPCProcGen.Core.States.BaseState.html",
    "title": "Class BaseState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class BaseState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Abstract base class for NPC states. public abstract class BaseState Inheritance object BaseState Derived FleeState MoveState StealState WanderState Constructors BaseState(NPCAgent2D) Initializes a new instance of the BaseState class. public BaseState(NPCAgent2D owner) Parameters owner NPCAgent2D The owner NPC agent. Fields _owner The owner NPC agent. protected readonly NPCAgent2D _owner Field Value NPCAgent2D Methods Enter() Called when the state is entered. public virtual void Enter() Exit() Called when the state is exited. public virtual void Exit() Update(double) Called to update the state. public virtual void Update(double delta) Parameters delta double The time elapsed since the last update."
  },
  "api/NPCProcGen.Core.States.FleeState.html": {
    "href": "api/NPCProcGen.Core.States.FleeState.html",
    "title": "Class FleeState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class FleeState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Represents the state where an NPC agent flees to a random position. public class FleeState : BaseState, INavigationState Inheritance object BaseState FleeState Implements INavigationState Constructors FleeState(NPCAgent2D) Initializes a new instance of the FleeState class. public FleeState(NPCAgent2D owner) Parameters owner NPCAgent2D The NPC agent owning this state. Fields _maxDistance private static readonly float _maxDistance Field Value float _minDistance private static readonly float _minDistance Field Value float _target private Vector2 _target Field Value Vector2 Methods Enter() Called when the state is entered. public override void Enter() Exit() Called when the state is exited. public override void Exit() GetTargetPosition() Gets the target position for navigation. public Vector2 GetTargetPosition() Returns Vector2 The target position. IsNavigating() Determines whether the agent is currently navigating. public bool IsNavigating() Returns bool True if the agent is navigating; otherwise, false. OnNavigationComplete() private void OnNavigationComplete() Events CompleteState Event triggered when the state is completed. public event Action CompleteState Event Type Action"
  },
  "api/NPCProcGen.Core.States.INavigationState.html": {
    "href": "api/NPCProcGen.Core.States.INavigationState.html",
    "title": "Interface INavigationState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Interface INavigationState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Interface for navigation states. public interface INavigationState Methods GetTargetPosition() Gets the target position for navigation. Vector2 GetTargetPosition() Returns Vector2 The target position as a Vector2. IsNavigating() Checks if the NPC is navigating. bool IsNavigating() Returns bool True if navigating, otherwise false."
  },
  "api/NPCProcGen.Core.States.MoveState.html": {
    "href": "api/NPCProcGen.Core.States.MoveState.html",
    "title": "Class MoveState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class MoveState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Represents the state where an NPC agent moves to a target position. public class MoveState : BaseState, INavigationState Inheritance object BaseState MoveState Implements INavigationState Constructors MoveState(NPCAgent2D, Node2D, Vector2?) Initializes a new instance of the MoveState class with a target node. public MoveState(NPCAgent2D owner, Node2D target, Vector2? lastPos = null) Parameters owner NPCAgent2D The NPC agent owning this state. target Node2D The target node to move to. lastPos Vector2? The last known position of the target. MoveState(NPCAgent2D, Vector2) Initializes a new instance of the MoveState class with a target position. public MoveState(NPCAgent2D owner, Vector2 targetPosition) Parameters owner NPCAgent2D The NPC agent owning this state. targetPosition Vector2 The target position to move to. Fields _target private readonly Node2D _target Field Value Node2D _targetPosition private Vector2? _targetPosition Field Value Vector2? Methods Enter() Called when the state is entered. public override void Enter() Exit() Called when the state is exited. public override void Exit() GetTargetPosition() Gets the target position for navigation. public Vector2 GetTargetPosition() Returns Vector2 The global position of the target. IsNavigating() Determines whether the agent is currently navigating. public bool IsNavigating() Returns bool True if the agent is navigating; otherwise, false. OnActorDetected(ActorTag2D) private void OnActorDetected(ActorTag2D target) Parameters target ActorTag2D OnCompleteState(bool) private void OnCompleteState(bool isActorDetected) Parameters isActorDetected bool OnNavigationComplete() private void OnNavigationComplete() Events CompleteState Event triggered when the state is completed. public event Action<bool> CompleteState Event Type Action<bool>"
  },
  "api/NPCProcGen.Core.States.StealState.html": {
    "href": "api/NPCProcGen.Core.States.StealState.html",
    "title": "Class StealState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class StealState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Represents the state where an NPC agent attempts to steal resources. public class StealState : BaseState, INavigationState Inheritance object BaseState StealState Implements INavigationState Constructors StealState(NPCAgent2D, ActorTag2D, ResourceType) Initializes a new instance of the StealState class. public StealState(NPCAgent2D owner, ActorTag2D target, ResourceType type) Parameters owner NPCAgent2D The NPC agent owning this state. target ActorTag2D The target actor to steal from. type ResourceType The type of resource to steal. Fields _amountToSteal private float _amountToSteal Field Value float _isTargetReached private bool _isTargetReached Field Value bool _target private readonly ActorTag2D _target Field Value ActorTag2D _targetResType private readonly ResourceType _targetResType Field Value ResourceType Methods ComputeStealAmount() private float ComputeStealAmount() Returns float Enter() Called when the state is entered. public override void Enter() Exit() Called when the state is exited. public override void Exit() GetResourceToSteal() Gets the resource type and amount to steal. public Tuple<ResourceType, float> GetResourceToSteal() Returns Tuple<ResourceType, float> A tuple containing the resource type and amount to steal. GetTargetPosition() Gets the target position for navigation. public Vector2 GetTargetPosition() Returns Vector2 The global position of the target. IsNavigating() Determines whether the agent is currently navigating. public bool IsNavigating() Returns bool True if the agent is navigating; otherwise, false. OnNavigationComplete() private void OnNavigationComplete() Events CompleteState Event triggered when the state is completed. public event Action CompleteState Event Type Action"
  },
  "api/NPCProcGen.Core.States.WanderState.html": {
    "href": "api/NPCProcGen.Core.States.WanderState.html",
    "title": "Class WanderState | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class WanderState Namespace NPCProcGen.Core.States Assembly EmergentEchoes.dll Represents a state where the NPC wanders around. public class WanderState : BaseState, INavigationState Inheritance object BaseState WanderState Implements INavigationState Constructors WanderState(NPCAgent2D, ActorTag2D) Initializes a new instance of the WanderState class. public WanderState(NPCAgent2D owner, ActorTag2D target) Parameters owner NPCAgent2D The owner of the state. target ActorTag2D The target actor. Fields _isWandering private bool _isWandering Field Value bool _max private static readonly int _max Field Value int _maxDuration private float _maxDuration Field Value float _min private static readonly int _min Field Value int _target private readonly ActorTag2D _target Field Value ActorTag2D _targetPosition private Vector2 _targetPosition Field Value Vector2 _timer private float _timer Field Value float _wanderInterval private float _wanderInterval Field Value float _wanderRadius private static readonly float _wanderRadius Field Value float Methods Enter() Called when the state is entered. public override void Enter() Exit() Called when the state is exited. public override void Exit() GetTargetPosition() Gets the target position. public Vector2 GetTargetPosition() Returns Vector2 The target position. IsNavigating() Checks if the NPC is navigating. public bool IsNavigating() Returns bool True if the NPC is navigating, otherwise false. OnActorDetected(ActorTag2D) Handles the detection of an actor. private void OnActorDetected(ActorTag2D target) Parameters target ActorTag2D The detected actor. OnCompleteState(bool) Handles the completion of the state. private void OnCompleteState(bool durationReached) Parameters durationReached bool Indicates if the maximum duration was reached. OnNavigationComplete() Handles the completion of navigation. private void OnNavigationComplete() Update(double) Updates the state. public override void Update(double delta) Parameters delta double The time elapsed since the last update. Events CompleteState Event triggered when the state is completed. public event Action<bool> CompleteState Event Type Action<bool>"
  },
  "api/NPCProcGen.Core.States.html": {
    "href": "api/NPCProcGen.Core.States.html",
    "title": "Namespace NPCProcGen.Core.States | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.States Classes BaseState Abstract base class for NPC states. FleeState Represents the state where an NPC agent flees to a random position. MoveState Represents the state where an NPC agent moves to a target position. StealState Represents the state where an NPC agent attempts to steal resources. WanderState Represents a state where the NPC wanders around. Interfaces INavigationState Interface for navigation states."
  },
  "api/NPCProcGen.Core.Traits.LawfulTrait.html": {
    "href": "api/NPCProcGen.Core.Traits.LawfulTrait.html",
    "title": "Class LawfulTrait | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class LawfulTrait Namespace NPCProcGen.Core.Traits Assembly EmergentEchoes.dll Represents a trait for lawful actions. public class LawfulTrait : Trait Inheritance object Trait LawfulTrait Constructors LawfulTrait(NPCAgent2D, float, Sensor, Memorizer) Initializes a new instance of the LawfulTrait class. public LawfulTrait(NPCAgent2D owner, float weight, Sensor sensor, Memorizer memorizer) Parameters owner NPCAgent2D The owner of the trait. weight float The weight of the trait. sensor Sensor The sensor associated with the trait. memorizer Memorizer The memorizer associated with the trait. Methods EvaluateAction(SocialPractice) Evaluates an action based on the given social practice. public override Tuple<BaseAction, float> EvaluateAction(SocialPractice practice) Parameters practice SocialPractice The social practice to evaluate. Returns Tuple<BaseAction, float> A tuple containing the evaluated action and its weight."
  },
  "api/NPCProcGen.Core.Traits.SurvivalTrait.html": {
    "href": "api/NPCProcGen.Core.Traits.SurvivalTrait.html",
    "title": "Class SurvivalTrait | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class SurvivalTrait Namespace NPCProcGen.Core.Traits Assembly EmergentEchoes.dll Represents a trait for survival actions. public class SurvivalTrait : Trait Inheritance object Trait SurvivalTrait Constructors SurvivalTrait(NPCAgent2D, float, Sensor, Memorizer) Initializes a new instance of the SurvivalTrait class. public SurvivalTrait(NPCAgent2D owner, float weight, Sensor sensor, Memorizer memorizer) Parameters owner NPCAgent2D The owner of the trait. weight float The weight of the trait. sensor Sensor The sensor associated with the trait. memorizer Memorizer The memorizer associated with the trait. Methods EvaluateAction(SocialPractice) Evaluates an action based on the given social practice. public override Tuple<BaseAction, float> EvaluateAction(SocialPractice practice) Parameters practice SocialPractice The social practice to evaluate. Returns Tuple<BaseAction, float> A tuple containing the evaluated action and its weight."
  },
  "api/NPCProcGen.Core.Traits.ThiefTrait.html": {
    "href": "api/NPCProcGen.Core.Traits.ThiefTrait.html",
    "title": "Class ThiefTrait | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class ThiefTrait Namespace NPCProcGen.Core.Traits Assembly EmergentEchoes.dll Represents a trait for stealing resources. public class ThiefTrait : Trait Inheritance object Trait ThiefTrait Constructors ThiefTrait(NPCAgent2D, float, Sensor, Memorizer) Initializes a new instance of the ThiefTrait class. public ThiefTrait(NPCAgent2D owner, float weight, Sensor sensor, Memorizer memorizer) Parameters owner NPCAgent2D The owner of the trait. weight float The weight of the trait. sensor Sensor The sensor associated with the trait. memorizer Memorizer The memorizer associated with the trait. Methods ChooseActor(ResourceType) Chooses an actor to steal from. private ActorTag2D ChooseActor(ResourceType type) Parameters type ResourceType The resource type to steal. Returns ActorTag2D The chosen actor. CreateTheftAction(ActorTag2D, ResourceType) Creates a theft action. private Tuple<BaseAction, float> CreateTheftAction(ActorTag2D chosenActor, ResourceType selectedType) Parameters chosenActor ActorTag2D The actor to steal from. selectedType ResourceType The resource type to steal. Returns Tuple<BaseAction, float> A tuple containing the theft action and its weight. EvaluateAction(SocialPractice) Evaluates an action based on the given social practice. public override Tuple<BaseAction, float> EvaluateAction(SocialPractice practice) Parameters practice SocialPractice The social practice to evaluate. Returns Tuple<BaseAction, float> A tuple containing the evaluated action and its weight. EvaluateProactiveAction() Evaluates a proactive action for stealing resources. private Tuple<BaseAction, float> EvaluateProactiveAction() Returns Tuple<BaseAction, float> A tuple containing the evaluated action and its weight. SelectResourceType(List<ResourceType>) Selects a resource type to steal. private ResourceType SelectResourceType(List<ResourceType> unevaluatedTypes) Parameters unevaluatedTypes List<ResourceType> The list of unevaluated resource types. Returns ResourceType The selected resource type."
  },
  "api/NPCProcGen.Core.Traits.Trait.html": {
    "href": "api/NPCProcGen.Core.Traits.Trait.html",
    "title": "Class Trait | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class Trait Namespace NPCProcGen.Core.Traits Assembly EmergentEchoes.dll Represents a trait of an NPC. public abstract class Trait Inheritance object Trait Derived LawfulTrait SurvivalTrait ThiefTrait Constructors Trait(NPCAgent2D, float, Sensor, Memorizer) Initializes a new instance of the Trait class. public Trait(NPCAgent2D owner, float weight, Sensor sensor, Memorizer memorizer) Parameters owner NPCAgent2D The owner of the trait. weight float The weight of the trait. sensor Sensor The sensor associated with the trait. memorizer Memorizer The memorizer associated with the trait. Fields _memorizer protected readonly Memorizer _memorizer Field Value Memorizer _owner protected readonly NPCAgent2D _owner Field Value NPCAgent2D _sensor protected readonly Sensor _sensor Field Value Sensor _weight protected readonly float _weight Field Value float Methods EvaluateAction(SocialPractice) Evaluates an action based on the given social practice. public abstract Tuple<BaseAction, float> EvaluateAction(SocialPractice practice) Parameters practice SocialPractice The social practice to evaluate. Returns Tuple<BaseAction, float> A tuple containing the evaluated action and its weight."
  },
  "api/NPCProcGen.Core.Traits.html": {
    "href": "api/NPCProcGen.Core.Traits.html",
    "title": "Namespace NPCProcGen.Core.Traits | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen.Core.Traits Classes LawfulTrait Represents a trait for lawful actions. SurvivalTrait Represents a trait for survival actions. ThiefTrait Represents a trait for stealing resources. Trait Represents a trait of an NPC."
  },
  "api/NPCProcGen.NPCAgent2D.ActionStateEnteredEventHandler.html": {
    "href": "api/NPCProcGen.NPCAgent2D.ActionStateEnteredEventHandler.html",
    "title": "Delegate NPCAgent2D.ActionStateEnteredEventHandler | NPC Procedural Generation Plugin for Godot",
    "keywords": "Delegate NPCAgent2D.ActionStateEnteredEventHandler Namespace NPCProcGen Assembly EmergentEchoes.dll [Signal] public delegate void NPCAgent2D.ActionStateEnteredEventHandler(Variant state) Parameters state Variant"
  },
  "api/NPCProcGen.NPCAgent2D.ActionStateExitedEventHandler.html": {
    "href": "api/NPCProcGen.NPCAgent2D.ActionStateExitedEventHandler.html",
    "title": "Delegate NPCAgent2D.ActionStateExitedEventHandler | NPC Procedural Generation Plugin for Godot",
    "keywords": "Delegate NPCAgent2D.ActionStateExitedEventHandler Namespace NPCProcGen Assembly EmergentEchoes.dll [Signal] public delegate void NPCAgent2D.ActionStateExitedEventHandler(Variant state) Parameters state Variant"
  },
  "api/NPCProcGen.NPCAgent2D.ExecutionEndedEventHandler.html": {
    "href": "api/NPCProcGen.NPCAgent2D.ExecutionEndedEventHandler.html",
    "title": "Delegate NPCAgent2D.ExecutionEndedEventHandler | NPC Procedural Generation Plugin for Godot",
    "keywords": "Delegate NPCAgent2D.ExecutionEndedEventHandler Namespace NPCProcGen Assembly EmergentEchoes.dll [Signal] public delegate void NPCAgent2D.ExecutionEndedEventHandler(Variant action) Parameters action Variant"
  },
  "api/NPCProcGen.NPCAgent2D.ExecutionStartedEventHandler.html": {
    "href": "api/NPCProcGen.NPCAgent2D.ExecutionStartedEventHandler.html",
    "title": "Delegate NPCAgent2D.ExecutionStartedEventHandler | NPC Procedural Generation Plugin for Godot",
    "keywords": "Delegate NPCAgent2D.ExecutionStartedEventHandler Namespace NPCProcGen Assembly EmergentEchoes.dll [Signal] public delegate void NPCAgent2D.ExecutionStartedEventHandler(Variant action) Parameters action Variant"
  },
  "api/NPCProcGen.NPCAgent2D.TheftCompletedEventHandler.html": {
    "href": "api/NPCProcGen.NPCAgent2D.TheftCompletedEventHandler.html",
    "title": "Delegate NPCAgent2D.TheftCompletedEventHandler | NPC Procedural Generation Plugin for Godot",
    "keywords": "Delegate NPCAgent2D.TheftCompletedEventHandler Namespace NPCProcGen Assembly EmergentEchoes.dll [Signal] public delegate void NPCAgent2D.TheftCompletedEventHandler(TheftData theftData) Parameters theftData TheftData"
  },
  "api/NPCProcGen.NPCAgent2D.html": {
    "href": "api/NPCProcGen.NPCAgent2D.html",
    "title": "Class NPCAgent2D | NPC Procedural Generation Plugin for Godot",
    "keywords": "Class NPCAgent2D Namespace NPCProcGen Assembly EmergentEchoes.dll Represents a 2D NPC agent with various traits and resource weights. Inherits from ActorTag2D. [Tool] [ScriptPath(\"res://addons/NPCProcGen/Nodes/NPCAgent2D/NPCAgent2D.cs\")] public class NPCAgent2D : ActorTag2D, IDisposable Inheritance object GodotObject Node ActorTag2D NPCAgent2D Implements IDisposable Fields _actorDetector private Area2D _actorDetector Field Value Area2D _detectedActors private readonly List<ActorTag2D> _detectedActors Field Value List<ActorTag2D> _evaluationTimer private Timer _evaluationTimer Field Value Timer backing_ActionStateEntered private NPCAgent2D.ActionStateEnteredEventHandler backing_ActionStateEntered Field Value NPCAgent2D.ActionStateEnteredEventHandler backing_ActionStateExited private NPCAgent2D.ActionStateExitedEventHandler backing_ActionStateExited Field Value NPCAgent2D.ActionStateExitedEventHandler backing_ExecutionEnded private NPCAgent2D.ExecutionEndedEventHandler backing_ExecutionEnded Field Value NPCAgent2D.ExecutionEndedEventHandler backing_ExecutionStarted private NPCAgent2D.ExecutionStartedEventHandler backing_ExecutionStarted Field Value NPCAgent2D.ExecutionStartedEventHandler backing_TheftCompleted private NPCAgent2D.TheftCompletedEventHandler backing_TheftCompleted Field Value NPCAgent2D.TheftCompletedEventHandler Properties ActorDetector Gets or sets the actor detector, which is an Area2D instance. When the actor detector is set to a new value, it updates the configuration warnings. [Export(PropertyHint.None, \"\")] public Area2D ActorDetector { get; set; } Property Value Area2D The Area2D instance representing the actor detector. Companionship [Export(PropertyHint.Range, \"0,1,0.01\")] public float Companionship { get; set; } Property Value float CompanionshipValue Gets or sets the companionship value associated with this NPC. [Export(PropertyHint.Range, \"1,100,\")] public int CompanionshipValue { get; set; } Property Value int The companionship value as an integer. Executor Gets the executor component of the NPC. public Executor Executor { get; private set; } Property Value Executor Food [Export(PropertyHint.Range, \"0,1,0.01\")] public float Food { get; set; } Property Value float Generous [Export(PropertyHint.Range, \"0,1,0.01\")] public float Generous { get; set; } Property Value float Lawful [Export(PropertyHint.Range, \"0,1,0.01\")] public float Lawful { get; set; } Property Value float Memorizer Gets the memorizer component of the NPC. public Memorizer Memorizer { get; private set; } Property Value Memorizer Money [ExportGroup(\"Resource Weights\", \"\")] [Export(PropertyHint.Range, \"0,1,0.01\")] public float Money { get; set; } Property Value float NotifManager Gets the notification manager of the NPC. public NotifManager NotifManager { get; private set; } Property Value NotifManager Sensor Gets the sensor component of the NPC. public Sensor Sensor { get; private set; } Property Value Sensor Social [Export(PropertyHint.Range, \"0,1,0.01\")] public float Social { get; set; } Property Value float Strategizer Gets the strategizer component of the NPC. public Strategizer Strategizer { get; private set; } Property Value Strategizer Survival [ExportGroup(\"Traits\", \"\")] [Export(PropertyHint.Range, \"0.01,1,0.01\")] public float Survival { get; set; } Property Value float TargetPosition Gets the target position for the NPC. public Vector2 TargetPosition { get; } Property Value Vector2 Thief [Export(PropertyHint.Range, \"0,1,0.01\")] public float Thief { get; set; } Property Value float Violent [Export(PropertyHint.Range, \"0,1,0.01\")] public float Violent { get; set; } Property Value float Methods AddTraits() Adds traits to the NPC's strategizer. private void AddTraits() CompleteNavigation() Completes the navigation for the NPC. public void CompleteNavigation() GetStolenResource() Gets the stolen resource by the NPC. public Tuple<ResourceType, float> GetStolenResource() Returns Tuple<ResourceType, float> A tuple containing the resource type and amount. Initialize(List<ActorTag2D>) Initializes the NPC with a list of actors. public void Initialize(List<ActorTag2D> actors) Parameters actors List<ActorTag2D> The list of actors to initialize with. IsActive() Checks if the NPC is currently active. public bool IsActive() Returns bool True if the NPC is active, otherwise false. IsActorInRange(ActorTag2D) Checks if the specified actor is in range. public bool IsActorInRange(ActorTag2D actor) Parameters actor ActorTag2D The actor to check. Returns bool True if the actor is in range, otherwise false. IsNavigationRequired() Checks if navigation is required for the NPC. public bool IsNavigationRequired() Returns bool True if navigation is required, otherwise false. OnBodyEntered(Node2D) private void OnBodyEntered(Node2D body) Parameters body Node2D OnBodyExited(Node2D) Handles the body exited event for the actor detector. Updates the memorizer with the actor's location and removes the actor from the detected list. private void OnBodyExited(Node2D body) Parameters body Node2D The body that exited the actor detector. OnEvaluationTimerTimeout() Handles the evaluation timer timeout event. Evaluates an action for the NPC. private void OnEvaluationTimerTimeout() OnExecutionEnded() Handles the execution ended event. Starts the evaluation timer. private void OnExecutionEnded() Events ActionStateEntered public event NPCAgent2D.ActionStateEnteredEventHandler ActionStateEntered Event Type NPCAgent2D.ActionStateEnteredEventHandler ActionStateExited public event NPCAgent2D.ActionStateExitedEventHandler ActionStateExited Event Type NPCAgent2D.ActionStateExitedEventHandler ExecutionEnded public event NPCAgent2D.ExecutionEndedEventHandler ExecutionEnded Event Type NPCAgent2D.ExecutionEndedEventHandler ExecutionStarted public event NPCAgent2D.ExecutionStartedEventHandler ExecutionStarted Event Type NPCAgent2D.ExecutionStartedEventHandler TheftCompleted public event NPCAgent2D.TheftCompletedEventHandler TheftCompleted Event Type NPCAgent2D.TheftCompletedEventHandler"
  },
  "api/NPCProcGen.html": {
    "href": "api/NPCProcGen.html",
    "title": "Namespace NPCProcGen | NPC Procedural Generation Plugin for Godot",
    "keywords": "Namespace NPCProcGen Classes ActorTag2D Represents a 2D tag for an actor, which includes monetary and food values, and a steal marker. NPCAgent2D Represents a 2D NPC agent with various traits and resource weights. Inherits from ActorTag2D. Delegates NPCAgent2D.ActionStateEnteredEventHandler NPCAgent2D.ActionStateExitedEventHandler NPCAgent2D.ExecutionEndedEventHandler NPCAgent2D.ExecutionStartedEventHandler NPCAgent2D.TheftCompletedEventHandler"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | NPC Procedural Generation Plugin for Godot",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | NPC Procedural Generation Plugin for Godot",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | NPC Procedural Generation Plugin for Godot",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}